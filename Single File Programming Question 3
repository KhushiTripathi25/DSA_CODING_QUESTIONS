Problem Statement: An astrologer gives a matrix to devilliers and tells him to add a largest row sum and largest column sum of the given matrix.The number which appears as a result is his lucky number for the final match jersey. Write a program that adds up the largest row sum and the largest column sum from an N- rows*M-columns array of numbers to help devilliers for finding his lucky number for the final match jersey. As a preliminary phrase , you should reformat the sequence of numbers as a matrix, whose number of rows and columns are to be specified as arguments.
Example1:
  Input1 = 2
  Input2 = 2
  Input3 = {1,2,5,6}
  Output: 19
  Explanation: Largest row(5,6) + Largest (2,6) =11+8 =19

Example 2:
  Input1:4
  Input2: 4
  Input3: {1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4}
  Output: 26
  Explanation: The array has 4 rows (input1) and 4 columns (input2). The largest sum among the four columns is 10 and the largest sum among the four rows is 16. We get the final sum of 26 (10+16).

Input format : The first line consists of an integer for row dimension of the array as R. The second line consists of an integer for column dimension of the array as C. The next R lines consists of the integers, representing the matrix elements.
Output format : The output displays the largest sum and the largest column sum from an N-rows*M-columns array of numbers. Refer to the sample output for the formatting specifications.

Code constraints :
  1 <= R, C <= 10
  1 <= matrix_elements <= 100

Sample test cases :
Input 1 :
 2
 2
 1 2
 5 6
Output 1 :
 19

Input 2 :
 4
 4
 1 1 1 1
 2 2 2 2
 3 3 3 3
 4 4 4 4
Output 2 :
 26

CPP CODE:
#include<bit/stdc++.h>
using namespace std;

int main() {
    int R, C;
    cin >> R >> C;

    // Create matrix
    vector<vector<int>> matrix(R, vector<int>(C));
    
    // Read matrix values
    for (int i = 0; i < R; i++)
        for (int j = 0; j < C; j++)
            cin >> matrix[i][j];

    // Find maximum row sum
    int maxRowSum = 0;
    for (int i = 0; i < R; i++) {
        int rowSum = 0;
        for (int j = 0; j < C; j++) {
            rowSum += matrix[i][j];
        }
        maxRowSum = max(maxRowSum, rowSum);
    }

    // Find maximum column sum
    int maxColSum = 0;
    for (int j = 0; j < C; j++) {
        int colSum = 0;
        for (int i = 0; i < R; i++) {
            colSum += matrix[i][j];
        }
        maxColSum = max(maxColSum, colSum);
    }

    // Output the lucky number
    cout << maxRowSum + maxColSum << endl;

    return 0;
}
