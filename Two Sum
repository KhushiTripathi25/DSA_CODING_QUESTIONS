Two Sum
Description:
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.
Example 1:
 Input: nums = [2,7,11,15], target = 9
 Output: [0,1]
 Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]

Example 2:
 Input: nums = [3,2,4], target = 6
 Output: [1,2]

Example 3:
 Input: nums = [3,3], target = 6
 Output: [0,1]

Constraints:
2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.
Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?

C++ CODE- 
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
       stack<pair<int, int>> s; // Stack to store {value, index}
       for (int i = 0; i < nums.size(); i++) {
        int complement = target - nums[i];
        stack<pair<int, int>> temp = s; // Make a copy of the stack to search
        while (!temp.empty()) {
            pair<int, int> top = temp.top();
            temp.pop();
            if (top.first == complement) {
                return {top.second, i}; // Return indices if pair found
            }
        }

        // Push the current number and its index onto the stack
        s.push({nums[i], i});
    }

    return {}; // Return an empty vector if no solution found
}
};
